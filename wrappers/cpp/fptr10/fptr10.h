/**
 * AUTO GENERATED FILE
 */

#ifndef DRIVERSX_CPP_WRAPPER_H
#define DRIVERSX_CPP_WRAPPER_H

#include <vector>
#include <string>
#include <ctime>

#if defined(__linux) || defined(__linux__) || defined(linux)

#  define DTOX_SHARED_CCA
#  define LIBRARY_HANDLE void*
#  define DTOX_OS_LINUX_FAMILY 1
#  if defined (ANDROID)
#    define DTOX_OS_ANDROID 1
#  else
#    define DTOX_OS_LINUX 1
#  endif

#elif defined(_WIN32) || defined(WIN32) || defined(_WIN64) || defined(WIN64) || \
    defined(__WIN32__) || defined(__TOS_WIN__) || defined(__WINDOWS__) || defined(_WINDOWS)

#  include <windows.h>
#  define DTOX_SHARED_CCA __cdecl
#  define LIBRARY_HANDLE HINSTANCE
#  define DTOX_OS_WINDOWS_FAMILY 1
#  if defined(WINAPI_FAMILY_PARTITION)
#    if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#      define DTOX_OS_WINDOWS 1
#    else
#      define DTOX_OS_WINRT 1
#    endif
#  else
#    if defined(_WIN32_WCE)
#      define DTOX_OS_WINCE 1
#    else
#      define DTOX_OS_WINDOWS 1
#    endif
#  endif

#elif defined(__APPLE__)
#  include "TargetConditionals.h"
#  define DTOX_SHARED_CCA
#  define LIBRARY_HANDLE void*
#  define DTOX_OS_APPLE_FAMILY 1
#  if TARGET_OS_IPHONE || TARGET_OS_SIMULATOR
#    define DTOX_OS_IPHONE 1
#    if TARGET_OS_SIMULATOR
#      define DTOX_OS_IPHONE_SIMULATOR 1
#    endif
#  elif TARGET_OS_MAC
#    define DTOX_OS_MAC 1

#endif

#endif

#if __cplusplus >= 201402L
#  define DEPRECATED(msg) [[deprecated(msg)]]
#elif defined(__GNUC__) || defined(__clang__)
#  define DEPRECATED(msg) __attribute__((deprecated(msg)))
#elif defined(_MSC_VER)
#  define DEPRECATED(msg) __declspec(deprecated(msg))
#else
#  define DEPRECATED(msg)
#endif

#ifndef DTOX_ERROR_ON_METHOD_LOAD
# define DTOX_ERROR_ON_METHOD_LOAD 0
#endif

namespace Atol
{

namespace Fptr
{

typedef int (DTOX_SHARED_CCA *COMMON_METHOD)(void *);

typedef const char *(DTOX_SHARED_CCA *GET_VERSION_STRING_METHOD)();

typedef int (DTOX_SHARED_CCA *CREATE_METHOD)(void **);
typedef int (DTOX_SHARED_CCA *DESTROY_METHOD)(void **);

typedef int (DTOX_SHARED_CCA *SET_SETTINGS_METHOD)(void *, const wchar_t *);
typedef int (DTOX_SHARED_CCA *GET_SETTINGS_METHOD)(void *, const wchar_t *, int);
typedef void (DTOX_SHARED_CCA *SET_SINGLE_SETTING_METHOD)(void *, const wchar_t *,
                                                          const wchar_t *);
typedef int (DTOX_SHARED_CCA *GET_SINGLE_SETTING_METHOD)(void *, const wchar_t *,
                                                         wchar_t *, int);

typedef int (DTOX_SHARED_CCA *IS_OPENED_METHOD)(void *);

typedef int (DTOX_SHARED_CCA *ERROR_CODE_METHOD)(void *);
typedef int (DTOX_SHARED_CCA *ERROR_DESCRIPTION_METHOD)(void *, wchar_t *, int);
typedef void (DTOX_SHARED_CCA *RESET_ERROR_METHOD)(void *);

typedef void (DTOX_SHARED_CCA *SET_PARAM_BOOL_METHOD)(void *, int, int);
typedef void (DTOX_SHARED_CCA *SET_PARAM_INT_METHOD)(void *, int, unsigned int);
typedef void (DTOX_SHARED_CCA *SET_PARAM_DOUBLE_METHOD)(void *, int, double);
typedef void (DTOX_SHARED_CCA *SET_PARAM_STRING_METHOD)(void *, int, const wchar_t *);
typedef void (DTOX_SHARED_CCA *SET_PARAM_BYTEARRAY_METHOD)(void *, int, const unsigned char *,
                                                           int);
typedef void (DTOX_SHARED_CCA *SET_PARAM_DATETIME_METHOD)(void *, int, int, int, int, int,
                                                          int, int);

typedef int (DTOX_SHARED_CCA *GET_PARAM_BOOL_METHOD)(void *, int);
typedef unsigned int(DTOX_SHARED_CCA *GET_PARAM_INT_METHOD)(void *, int);
typedef double (DTOX_SHARED_CCA *GET_PARAM_DOUBLE_METHOD)(void *, int);
typedef int (DTOX_SHARED_CCA *GET_PARAM_STRING_METHOD)(void *, int, wchar_t *, int);
typedef int (DTOX_SHARED_CCA *GET_PARAM_BYTEARRAY_METHOD)(void *, int, unsigned char *, int);
typedef void (DTOX_SHARED_CCA *GET_PARAM_DATETIME_METHOD)(void *, int, int *, int *, int *,
                                                          int *, int *, int *);

typedef int (DTOX_SHARED_CCA *WRITE_LOG_METHOD)(const wchar_t *, int, const wchar_t *);
typedef int (DTOX_SHARED_CCA *SHOW_PROPERTIES_METHOD)(void *, int, void *);


const int LIBFPTR_PARAM_TEXT = 65536; 

const int LIBFPTR_PARAM_TEXT_WRAP = 65537; 

const int LIBFPTR_PARAM_ALIGNMENT = 65538; 

const int LIBFPTR_PARAM_FONT = 65539; 

const int LIBFPTR_PARAM_FONT_DOUBLE_WIDTH = 65540; 

const int LIBFPTR_PARAM_FONT_DOUBLE_HEIGHT = 65541; 

const int LIBFPTR_PARAM_LINESPACING = 65542; 

const int LIBFPTR_PARAM_BRIGHTNESS = 65543; 

const int LIBFPTR_PARAM_MODEL = 65544; 

const int LIBFPTR_PARAM_RECEIPT_TYPE = 65545; 

const int LIBFPTR_PARAM_REPORT_TYPE = 65546; 

const int LIBFPTR_PARAM_MODE = 65547; 

const int LIBFPTR_PARAM_EXTERNAL_DEVICE_TYPE = 65548; 

const int LIBFPTR_PARAM_EXTERNAL_DEVICE_DATA = 65549; 

const int LIBFPTR_PARAM_FREQUENCY = 65550; 

const int LIBFPTR_PARAM_DURATION = 65551; 

const int LIBFPTR_PARAM_CUT_TYPE = 65552; 

const int LIBFPTR_PARAM_DRAWER_ON_TIMEOUT = 65553; 

const int LIBFPTR_PARAM_DRAWER_OFF_TIMEOUT = 65554; 

const int LIBFPTR_PARAM_DRAWER_ON_QUANTITY = 65555; 

const int LIBFPTR_PARAM_TIMEOUT_ENQ = 65556; 

const int LIBFPTR_PARAM_COMMAND_BUFFER = 65557; 

const int LIBFPTR_PARAM_ANSWER_BUFFER = 65558; 

const int LIBFPTR_PARAM_SERIAL_NUMBER = 65559; 

const int LIBFPTR_PARAM_MANUFACTURER_CODE = 65560; 

const int LIBFPTR_PARAM_NO_NEED_ANSWER = 65561; 

const int LIBFPTR_PARAM_INFO_DISCOUNT_SUM = 65562; 

const int LIBFPTR_PARAM_USE_ONLY_TAX_TYPE = 65563; 

const int LIBFPTR_PARAM_PAYMENT_TYPE = 65564; 

const int LIBFPTR_PARAM_PAYMENT_SUM = 65565; 

const int LIBFPTR_PARAM_REMAINDER = 65566; 

const int LIBFPTR_PARAM_CHANGE = 65567; 

const int LIBFPTR_PARAM_DEPARTMENT = 65568; 

const int LIBFPTR_PARAM_TAX_TYPE = 65569; 

const int LIBFPTR_PARAM_TAX_SUM = 65570; 

const int LIBFPTR_PARAM_TAX_MODE = 65571; 

const int LIBFPTR_PARAM_RECEIPT_ELECTRONICALLY = 65572; 

const int LIBFPTR_PARAM_USER_PASSWORD = 65573; 

const int LIBFPTR_PARAM_SCALE = 65574; 

const int LIBFPTR_PARAM_LEFT_MARGIN = 65575; 

const int LIBFPTR_PARAM_BARCODE = 65576; 

const int LIBFPTR_PARAM_BARCODE_TYPE = 65577; 

const int LIBFPTR_PARAM_BARCODE_PRINT_TEXT = 65578; 

const int LIBFPTR_PARAM_BARCODE_VERSION = 65579; 

const int LIBFPTR_PARAM_BARCODE_CORRECTION = 65580; 

const int LIBFPTR_PARAM_BARCODE_COLUMNS = 65581; 

const int LIBFPTR_PARAM_BARCODE_INVERT = 65582; 

const int LIBFPTR_PARAM_HEIGHT = 65583; 

const int LIBFPTR_PARAM_WIDTH = 65584; 

const int LIBFPTR_PARAM_FILENAME = 65585; 

const int LIBFPTR_PARAM_PICTURE_NUMBER = 65586; 

const int LIBFPTR_PARAM_DATA_TYPE = 65587; 

const int LIBFPTR_PARAM_OPERATOR_ID = 65588; 

const int LIBFPTR_PARAM_LOGICAL_NUMBER = 65589; 

const int LIBFPTR_PARAM_DATE_TIME = 65590; 

const int LIBFPTR_PARAM_FISCAL = 65591; 

const int LIBFPTR_PARAM_SHIFT_STATE = 65592; 

const int LIBFPTR_PARAM_CASHDRAWER_OPENED = 65593; 

const int LIBFPTR_PARAM_RECEIPT_PAPER_PRESENT = 65594; 

const int LIBFPTR_PARAM_COVER_OPENED = 65595; 

const int LIBFPTR_PARAM_SUBMODE = 65596; 

const int LIBFPTR_PARAM_RECEIPT_NUMBER = 65597; 

const int LIBFPTR_PARAM_DOCUMENT_NUMBER = 65598; 

const int LIBFPTR_PARAM_SHIFT_NUMBER = 65599; 

const int LIBFPTR_PARAM_RECEIPT_SUM = 65600; 

const int LIBFPTR_PARAM_RECEIPT_LINE_LENGTH = 65601; 

const int LIBFPTR_PARAM_RECEIPT_LINE_LENGTH_PIX = 65602; 

const int LIBFPTR_PARAM_MODEL_NAME = 65603; 

const int LIBFPTR_PARAM_UNIT_VERSION = 65604; 

const int LIBFPTR_PARAM_PRINTER_CONNECTION_LOST = 65605; 

const int LIBFPTR_PARAM_PRINTER_ERROR = 65606; 

const int LIBFPTR_PARAM_CUT_ERROR = 65607; 

const int LIBFPTR_PARAM_PRINTER_OVERHEAT = 65608; 

const int LIBFPTR_PARAM_UNIT_TYPE = 65609; 

const int LIBFPTR_PARAM_LICENSE_NUMBER = 65610; 

const int LIBFPTR_PARAM_LICENSE_ENTERED = 65611; 

const int LIBFPTR_PARAM_LICENSE = 65612; 

const int LIBFPTR_PARAM_SUM = 65613; 

const int LIBFPTR_PARAM_COUNT = 65614; 

const int LIBFPTR_PARAM_COUNTER_TYPE = 65615; 

const int LIBFPTR_PARAM_STEP_COUNTER_TYPE = 65616; 

const int LIBFPTR_PARAM_ERROR_TAG_NUMBER = 65617; 

const int LIBFPTR_PARAM_TABLE = 65618; 

const int LIBFPTR_PARAM_ROW = 65619; 

const int LIBFPTR_PARAM_FIELD = 65620; 

const int LIBFPTR_PARAM_FIELD_VALUE = 65621; 

const int LIBFPTR_PARAM_FN_DATA_TYPE = 65622; 

const int LIBFPTR_PARAM_TAG_NUMBER = 65623; 

const int LIBFPTR_PARAM_TAG_VALUE = 65624; 

const int LIBFPTR_PARAM_DOCUMENTS_COUNT = 65625; 

const int LIBFPTR_PARAM_FISCAL_SIGN = 65626; 

const int LIBFPTR_PARAM_DEVICE_FFD_VERSION = 65627; 

const int LIBFPTR_PARAM_FN_FFD_VERSION = 65628; 

const int LIBFPTR_PARAM_FFD_VERSION = 65629; 

const int LIBFPTR_PARAM_CHECK_SUM = 65630; 

const int LIBFPTR_PARAM_COMMODITY_NAME = 65631; 

const int LIBFPTR_PARAM_PRICE = 65632; 

const int LIBFPTR_PARAM_QUANTITY = 65633; 

const int LIBFPTR_PARAM_POSITION_SUM = 65634; 

const int LIBFPTR_PARAM_FN_TYPE = 65635; 

const int LIBFPTR_PARAM_FN_VERSION = 65636; 

const int LIBFPTR_PARAM_REGISTRATIONS_REMAIN = 65637; 

const int LIBFPTR_PARAM_REGISTRATIONS_COUNT = 65638; 

const int LIBFPTR_PARAM_NO_ERROR_IF_NOT_SUPPORTED = 65639; 

const int LIBFPTR_PARAM_OFD_EXCHANGE_STATUS = 65640; 

const int LIBFPTR_PARAM_FN_ERROR_DATA = 65641; 

const int LIBFPTR_PARAM_FN_ERROR_CODE = 65642; 

const int LIBFPTR_PARAM_ENVD_MODE = 65643; 

const int LIBFPTR_PARAM_DOCUMENT_CLOSED = 65644; 

const int LIBFPTR_PARAM_JSON_DATA = 65645; 

const int LIBFPTR_PARAM_COMMAND_SUBSYSTEM = 65646; 

const int LIBFPTR_PARAM_FN_OPERATION_TYPE = 65647; 

const int LIBFPTR_PARAM_FN_STATE = 65648; 

const int LIBFPTR_PARAM_ENVD_MODE_ENABLED = 65649; 

const int LIBFPTR_PARAM_SETTING_ID = 65650; 

const int LIBFPTR_PARAM_SETTING_VALUE = 65651; 

const int LIBFPTR_PARAM_MAPPING_KEY = 65652; 

const int LIBFPTR_PARAM_MAPPING_VALUE = 65653; 

const int LIBFPTR_PARAM_COMMODITY_PIECE = 65654; 

const int LIBFPTR_PARAM_POWER_SOURCE_TYPE = 65655; 

const int LIBFPTR_PARAM_BATTERY_CHARGE = 65656; 

const int LIBFPTR_PARAM_VOLTAGE = 65657; 

const int LIBFPTR_PARAM_USE_BATTERY = 65658; 

const int LIBFPTR_PARAM_BATTERY_CHARGING = 65659; 

const int LIBFPTR_PARAM_CAN_PRINT_WHILE_ON_BATTERY = 65660; 

const int LIBFPTR_PARAM_MAC_ADDRESS = 65661; 

const int LIBFPTR_PARAM_FN_FISCAL = 65662; 

const int LIBFPTR_PARAM_NETWORK_ERROR = 65663; 

const int LIBFPTR_PARAM_OFD_ERROR = 65664; 

const int LIBFPTR_PARAM_FN_ERROR = 65665; 

const int LIBFPTR_PARAM_COMMAND_CODE = 65666; 

const int LIBFPTR_PARAM_PRINTER_TEMPERATURE = 65667; 

const int LIBFPTR_PARAM_RECORDS_TYPE = 65668; 

const int LIBFPTR_PARAM_OFD_FISCAL_SIGN = 65669; 

const int LIBFPTR_PARAM_HAS_OFD_TICKET = 65670; 

const int LIBFPTR_PARAM_NO_SERIAL_NUMBER = 65671; 

const int LIBFPTR_PARAM_RTC_FAULT = 65672; 

const int LIBFPTR_PARAM_SETTINGS_FAULT = 65673; 

const int LIBFPTR_PARAM_COUNTERS_FAULT = 65674; 

const int LIBFPTR_PARAM_USER_MEMORY_FAULT = 65675; 

const int LIBFPTR_PARAM_SERVICE_COUNTERS_FAULT = 65676; 

const int LIBFPTR_PARAM_ATTRIBUTES_FAULT = 65677; 

const int LIBFPTR_PARAM_FN_FAULT = 65678; 

const int LIBFPTR_PARAM_INVALID_FN = 65679; 

const int LIBFPTR_PARAM_HARD_FAULT = 65680; 

const int LIBFPTR_PARAM_MEMORY_MANAGER_FAULT = 65681; 

const int LIBFPTR_PARAM_SCRIPTS_FAULT = 65682; 

const int LIBFPTR_PARAM_FULL_RESET = 65683; 

const int LIBFPTR_PARAM_WAIT_FOR_REBOOT = 65684; 

const int LIBFPTR_PARAM_SCALE_PERCENT = 65685; 

const int LIBFPTR_PARAM_FN_NEED_REPLACEMENT = 65686; 

const int LIBFPTR_PARAM_FN_RESOURCE_EXHAUSTED = 65687; 

const int LIBFPTR_PARAM_FN_MEMORY_OVERFLOW = 65688; 

const int LIBFPTR_PARAM_FN_OFD_TIMEOUT = 65689; 

const int LIBFPTR_PARAM_FN_CRITICAL_ERROR = 65690; 

const int LIBFPTR_PARAM_OFD_MESSAGE_READ = 65691; 

const int LIBFPTR_PARAM_DEVICE_MIN_FFD_VERSION = 65692; 

const int LIBFPTR_PARAM_DEVICE_MAX_FFD_VERSION = 65693; 

const int LIBFPTR_PARAM_DEVICE_UPTIME = 65694; 

const int LIBFPTR_PARAM_NOMENCLATURE_TYPE = 65695; 

const int LIBFPTR_PARAM_GTIN = 65696; 

const int LIBFPTR_PARAM_FN_DOCUMENT_TYPE = 65697; 

const int LIBFPTR_PARAM_NETWORK_ERROR_TEXT = 65698; 

const int LIBFPTR_PARAM_FN_ERROR_TEXT = 65699; 

const int LIBFPTR_PARAM_OFD_ERROR_TEXT = 65700; 

const int LIBFPTR_PARAM_USER_SCRIPT_ID = 65701; 

const int LIBFPTR_PARAM_USER_SCRIPT_PARAMETER = 65702; 

const int LIBFPTR_PARAM_USER_MEMORY_OPERATION = 65703; 

const int LIBFPTR_PARAM_USER_MEMORY_DATA = 65704; 

const int LIBFPTR_PARAM_USER_MEMORY_STRING = 65705; 

const int LIBFPTR_PARAM_USER_MEMORY_ADDRESS = 65706; 

const int LIBFPTR_PARAM_FN_PRESENT = 65707; 

const int LIBFPTR_PARAM_BLOCKED = 65708; 

const int LIBFPTR_PARAM_DOCUMENT_PRINTED = 65709; 

const int LIBFPTR_PARAM_DISCOUNT_SUM = 65710; 

const int LIBFPTR_PARAM_SURCHARGE_SUM = 65711; 

const int LIBFPTR_PARAM_LK_USER_CODE = 65712; 

const int LIBFPTR_PARAM_LICENSE_COUNT = 65713; 

const int LIBFPTR_PARAM_DEFER = 65714; 

const int LIBFPTR_PARAM_CAP_54FZ = 65715; 

const int LIBFPTR_PARAM_CAP_MANUAL_CLICHE_CONTROL = 65716; 

const int LIBFPTR_PARAM_CAP_PAYMENTS_COUNT = 65717; 

const int LIBFPTR_PARAM_FIRMWARE_CHUNK_SIZE = 65718; 

const int LIBFPTR_PARAM_FIRMWARE_CHUNK_DATA = 65719; 

const int LIBFPTR_PARAM_FN_FLAGS = 65720; 

const int LIBFPTR_PARAM_PRINT_FOOTER = 65721; 

const int LIBFPTR_PARAM_PUBLIC_KEY = 65722; 

const int LIBFPTR_PARAM_MAGIC_NUMBER = 65723; 

const int LIBFPTR_PARAM_SIGN = 65724; 

const int LIBFPTR_PARAM_SOFT_NAME = 65725; 

const int LIBFPTR_PARAM_SESSION_CODE = 65726; 

const int LIBFPTR_PARAM_ETHERNET_CONFIG_TIMEOUT = 65727; 

const int LIBFPTR_PARAM_ETHERNET_DHCP = 65728; 

const int LIBFPTR_PARAM_ETHERNET_IP = 65729; 

const int LIBFPTR_PARAM_ETHERNET_MASK = 65730; 

const int LIBFPTR_PARAM_ETHERNET_GATEWAY = 65731; 

const int LIBFPTR_PARAM_ETHERNET_PORT = 65732; 

const int LIBFPTR_PARAM_ETHERNET_DNS_IP = 65733; 

const int LIBFPTR_PARAM_ETHERNET_DNS_STATIC = 65734; 

const int LIBFPTR_PARAM_STORE_IN_JOURNAL = 65735; 

const int LIBFPTR_PARAM_NEW_PLATFORM = 65736; 

const int LIBFPTR_PARAM_UNIT_RELEASE_VERSION = 65737; 

const int LIBFPTR_PARAM_USE_VAT18 = 65738; 

const int LIBFPTR_PARAM_TAG_NAME = 65739; 

const int LIBFPTR_PARAM_TAG_TYPE = 65740; 

const int LIBFPTR_PARAM_TAG_IS_COMPLEX = 65741; 

const int LIBFPTR_PARAM_TAG_IS_REPEATABLE = 65742; 

const int LIBFPTR_PARAM_SHIFT_AUTO_OPENED = 65743; 

const int LIBFPTR_PARAM_CONTAINER_FIRMWARE_VERSION = 65744; 

const int LIBFPTR_PARAM_CONTAINER_CONFIGURATION_VERSION = 65745; 

const int LIBFPTR_PARAM_CONTAINER_BOOTLOADER_VERSION = 65746; 

const int LIBFPTR_PARAM_CONTAINER_SCRIPTS_VERSION = 65747; 

const int LIBFPTR_PARAM_PAPER_NEAR_END = 65748; 

const int LIBFPTR_PARAM_REPORT_ELECTRONICALLY = 65749; 

const int LIBFPTR_PARAM_ACTIVATION_METHOD = 65750; 

const int LIBFPTR_PARAM_KEYS = 65751; 

const int LIBFPTR_PARAM_UIN = 65752; 

const int LIBFPTR_PARAM_VERSION = 65753; 

const int LIBFPTR_PARAM_PUBLIC_KEY_SIGN = 65754; 

const int LIBFPTR_PARAM_CAP_DISABLE_PRINT_REPORTS = 65755; 

const int LIBFPTR_PARAM_REGISTRATION_NUMBER = 65756; 

const int LIBFPTR_PARAM_PIXEL_BUFFER = 65757; 

const int LIBFPTR_PARAM_REPEAT_NUMBER = 65758; 

const int LIBFPTR_PARAM_FIELD_TYPE = 65759; 

const int LIBFPTR_PARAM_MARKING_CODE = 65760; 

const int LIBFPTR_PARAM_CONTAINER_DIRECT_BOOT_VERSION = 65761; 

const int LIBFPTR_PARAM_SCRIPT_NAME = 65762; 

const int LIBFPTR_PARAM_SCRIPT_HASH = 65763; 

const int LIBFPTR_PARAM_RECORDS_ID = 65764; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_1 = 65765; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_2 = 65766; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_3 = 65767; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_4 = 65768; 

const int LIBFPTR_PARAM_USER_SCRIPT_RESULT_5 = 65769; 

const int LIBFPTR_PARAM_IS_USER_SCRIPT = 65770; 

const int LIBFPTR_PARAM_DOCUMENT_NUMBER_END = 65771; 

const int LIBFPTR_PARAM_SHIFT_NUMBER_END = 65772; 

const int LIBFPTR_PARAM_SCRIPT_CODE = 65773; 

const int LIBFPTR_PARAM_SCRIPT_RESULT = 65774; 

const int LIBFPTR_PARAM_SCRIPT_TYPE = 65775; 

const int LIBFPTR_PARAM_WIFI_CONFIG_TIMEOUT = 65776; 

const int LIBFPTR_PARAM_WIFI_DHCP = 65777; 

const int LIBFPTR_PARAM_WIFI_IP = 65778; 

const int LIBFPTR_PARAM_WIFI_MASK = 65779; 

const int LIBFPTR_PARAM_WIFI_GATEWAY = 65780; 

const int LIBFPTR_PARAM_WIFI_PORT = 65781; 

const int LIBFPTR_PARAM_UC_VERSION = 65782; 

const int LIBFPTR_PARAM_UC_AVAILABLE_MEMORY = 65783; 

const int LIBFPTR_PARAM_UC_USED_MEMORY_BY_SUMS = 65784; 

const int LIBFPTR_PARAM_UC_USED_MEMORY_BY_QUANTITIES = 65785; 

const int LIBFPTR_PARAM_UC_LAYER_1 = 65786; 

const int LIBFPTR_PARAM_UC_FLAGS_1 = 65787; 

const int LIBFPTR_PARAM_UC_MASK_1 = 65788; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_1 = 65789; 

const int LIBFPTR_PARAM_UC_LAYER_2 = 65790; 

const int LIBFPTR_PARAM_UC_FLAGS_2 = 65791; 

const int LIBFPTR_PARAM_UC_MASK_2 = 65792; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_2 = 65793; 

const int LIBFPTR_PARAM_UC_LAYER_3 = 65794; 

const int LIBFPTR_PARAM_UC_FLAGS_3 = 65795; 

const int LIBFPTR_PARAM_UC_MASK_3 = 65796; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_3 = 65797; 

const int LIBFPTR_PARAM_UC_LAYER_4 = 65798; 

const int LIBFPTR_PARAM_UC_FLAGS_4 = 65799; 

const int LIBFPTR_PARAM_UC_MASK_4 = 65800; 

const int LIBFPTR_PARAM_UC_LAYER_VALUE_4 = 65801; 

const int LIBFPTR_PARAM_RECEIPTS_COUNT = 65802; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_CASH = 65803; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_ELECTRONICALLY = 65804; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_PREPAID = 65805; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_CREDIT = 65806; 

const int LIBFPTR_PARAM_PAYMENTS_SUM_OTHER = 65807; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT20 = 65808; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT120 = 65809; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT10 = 65810; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT110 = 65811; 

const int LIBFPTR_PARAM_TAXES_SUM_VAT0 = 65812; 

const int LIBFPTR_PARAM_TAXES_SUM_NO = 65813; 

const int LIBFPTR_PARAM_CORRECTIONS_COUNT = 65814; 

const int LIBFPTR_PARAM_CORRECTIONS_SUM = 65815; 

const int LIBFPTR_PARAM_FN_COUNTERS_TYPE = 65816; 

const int LIBFPTR_PARAM_FN_DAYS_REMAIN = 65817; 

const int LIBFPTR_PARAM_FREE_MEMORY = 65818; 

const int LIBFPTR_PARAM_FN_MAX_FFD_VERSION = 65819; 

const int LIBFPTR_PARAM_RECEIPTS_SUM = 65820; 

const int LIBFPTR_PARAM_LICENSE_NAME = 65821; 

const int LIBFPTR_PARAM_UNIVERSAL_COUNTERS_FAULT = 65822; 

const int LIBFPTR_PARAM_USE_LICENSES = 65823; 

const int LIBFPTR_PARAM_LICENSE_VALID_FROM = 65824; 

const int LIBFPTR_PARAM_LICENSE_VALID_UNTIL = 65825; 

const int LIBFPTR_PARAM_MARKING_CODE_TYPE = 65826; 

const int LIBFPTR_PARAM_SETTING_NAME = 65827; 

const int LIBFPTR_PARAM_SETTING_TYPE = 65828; 

const int LIBFPTR_OK = 0; 

const int LIBFPTR_ERROR_CONNECTION_DISABLED = 1; 

const int LIBFPTR_ERROR_NO_CONNECTION = 2; 

const int LIBFPTR_ERROR_PORT_BUSY = 3; 

const int LIBFPTR_ERROR_PORT_NOT_AVAILABLE = 4; 

const int LIBFPTR_ERROR_INCORRECT_DATA = 5; 

const int LIBFPTR_ERROR_INTERNAL = 6; 

const int LIBFPTR_ERROR_UNSUPPORTED_CAST = 7; 

const int LIBFPTR_ERROR_NO_REQUIRED_PARAM = 8; 

const int LIBFPTR_ERROR_INVALID_SETTINGS = 9; 

const int LIBFPTR_ERROR_NOT_CONFIGURED = 10; 

const int LIBFPTR_ERROR_NOT_SUPPORTED = 11; 

const int LIBFPTR_ERROR_INVALID_MODE = 12; 

const int LIBFPTR_ERROR_INVALID_PARAM = 13; 

const int LIBFPTR_ERROR_NOT_LOADED = 14; 

const int LIBFPTR_ERROR_UNKNOWN = 15; 

const int LIBFPTR_ERROR_INVALID_SUM = 16; 

const int LIBFPTR_ERROR_INVALID_QUANTITY = 17; 

const int LIBFPTR_ERROR_CASH_COUNTER_OVERFLOW = 18; 

const int LIBFPTR_ERROR_LAST_OPERATION_STORNO_DENIED = 19; 

const int LIBFPTR_ERROR_STORNO_BY_CODE_DENIED = 20; 

const int LIBFPTR_ERROR_LAST_OPERATION_NOT_REPEATABLE = 21; 

const int LIBFPTR_ERROR_DISCOUNT_NOT_REPEATABLE = 22; 

const int LIBFPTR_ERROR_DISCOUNT_DENIED = 23; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_CODE = 24; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_BARCODE = 25; 

const int LIBFPTR_ERROR_INVALID_COMMAND_FORMAT = 26; 

const int LIBFPTR_ERROR_INVALID_COMMAND_LENGTH = 27; 

const int LIBFPTR_ERROR_BLOCKED_IN_DATE_INPUT_MODE = 28; 

const int LIBFPTR_ERROR_NEED_DATE_ACCEPT = 29; 

const int LIBFPTR_ERROR_NO_MORE_DATA = 30; 

const int LIBFPTR_ERROR_NO_ACCEPT_OR_CANCEL = 31; 

const int LIBFPTR_ERROR_BLOCKED_BY_REPORT_INTERRUPTION = 32; 

const int LIBFPTR_ERROR_DISABLE_CASH_CONTROL_DENIED = 33; 

const int LIBFPTR_ERROR_MODE_BLOCKED = 34; 

const int LIBFPTR_ERROR_CHECK_DATE_TIME = 35; 

const int LIBFPTR_ERROR_DATE_TIME_LESS_THAN_FS = 36; 

const int LIBFPTR_ERROR_CLOSE_ARCHIVE_DENIED = 37; 

const int LIBFPTR_ERROR_COMMODITY_NOT_FOUND = 38; 

const int LIBFPTR_ERROR_WEIGHT_BARCODE_WITH_INVALID_QUANTITY = 39; 

const int LIBFPTR_ERROR_RECEIPT_BUFFER_OVERFLOW = 40; 

const int LIBFPTR_ERROR_QUANTITY_TOO_FEW = 41; 

const int LIBFPTR_ERROR_STORNO_TOO_MUCH = 42; 

const int LIBFPTR_ERROR_BLOCKED_COMMODITY_NOT_FOUND = 43; 

const int LIBFPTR_ERROR_NO_PAPER = 44; 

const int LIBFPTR_ERROR_COVER_OPENED = 45; 

const int LIBFPTR_ERROR_PRINTER_FAULT = 46; 

const int LIBFPTR_ERROR_MECHANICAL_FAULT = 47; 

const int LIBFPTR_ERROR_INVALID_RECEIPT_TYPE = 48; 

const int LIBFPTR_ERROR_INVALID_UNIT_TYPE = 49; 

const int LIBFPTR_ERROR_NO_MEMORY = 50; 

const int LIBFPTR_ERROR_PICTURE_NOT_FOUND = 51; 

const int LIBFPTR_ERROR_NONCACH_PAYMENTS_TOO_MUCH = 52; 

const int LIBFPTR_ERROR_RETURN_DENIED = 53; 

const int LIBFPTR_ERROR_PAYMENTS_OVERFLOW = 54; 

const int LIBFPTR_ERROR_BUSY = 55; 

const int LIBFPTR_ERROR_GSM = 56; 

const int LIBFPTR_ERROR_INVALID_DISCOUNT = 57; 

const int LIBFPTR_ERROR_OPERATION_AFTER_DISCOUNT_DENIED = 58; 

const int LIBFPTR_ERROR_INVALID_DEPARTMENT = 59; 

const int LIBFPTR_ERROR_INVALID_PAYMENT_TYPE = 60; 

const int LIBFPTR_ERROR_MULTIPLICATION_OVERFLOW = 61; 

const int LIBFPTR_ERROR_DENIED_BY_SETTINGS = 62; 

const int LIBFPTR_ERROR_TOTAL_OVERFLOW = 63; 

const int LIBFPTR_ERROR_DENIED_IN_ANNULATION_RECEIPT = 64; 

const int LIBFPTR_ERROR_JOURNAL_OVERFLOW = 65; 

const int LIBFPTR_ERROR_NOT_FULLY_PAID = 66; 

const int LIBFPTR_ERROR_DENIED_IN_RETURN_RECEIPT = 67; 

const int LIBFPTR_ERROR_SHIFT_EXPIRED = 68; 

const int LIBFPTR_ERROR_DENIED_IN_SELL_RECEIPT = 69; 

const int LIBFPTR_ERROR_FISCAL_MEMORY_OVERFLOW = 70; 

const int LIBFPTR_ERROR_INVALID_PASSWORD = 71; 

const int LIBFPTR_ERROR_JOURNAL_BUSY = 72; 

const int LIBFPTR_ERROR_DENIED_IN_CLOSED_SHIFT = 73; 

const int LIBFPTR_ERROR_INVALID_TABLE_NUMBER = 74; 

const int LIBFPTR_ERROR_INVALID_ROW_NUMBER = 75; 

const int LIBFPTR_ERROR_INVALID_FIELD_NUMBER = 76; 

const int LIBFPTR_ERROR_INVALID_DATE_TIME = 77; 

const int LIBFPTR_ERROR_INVALID_STORNO_SUM = 78; 

const int LIBFPTR_ERROR_CHANGE_CALCULATION = 79; 

const int LIBFPTR_ERROR_NO_CASH = 80; 

const int LIBFPTR_ERROR_DENIED_IN_CLOSED_RECEIPT = 81; 

const int LIBFPTR_ERROR_DENIED_IN_OPENED_RECEIPT = 82; 

const int LIBFPTR_ERROR_DENIED_IN_OPENED_SHIFT = 83; 

const int LIBFPTR_ERROR_SERIAL_NUMBER_ALREADY_ENTERED = 84; 

const int LIBFPTR_ERROR_TOO_MUCH_REREGISTRATIONS = 85; 

const int LIBFPTR_ERROR_INVALID_SHIFT_NUMBER = 86; 

const int LIBFPTR_ERROR_INVALID_SERIAL_NUMBER = 87; 

const int LIBFPTR_ERROR_INVALID_RNM_VATIN = 88; 

const int LIBFPTR_ERROR_FISCAL_PRINTER_NOT_ACTIVATED = 89; 

const int LIBFPTR_ERROR_SERIAL_NUMBER_NOT_ENTERED = 90; 

const int LIBFPTR_ERROR_NO_MORE_REPORTS = 91; 

const int LIBFPTR_ERROR_MODE_NOT_ACTIVATED = 92; 

const int LIBFPTR_ERROR_RECORD_NOT_FOUND_IN_JOURNAL = 93; 

const int LIBFPTR_ERROR_INVALID_LICENSE = 94; 

const int LIBFPTR_ERROR_NEED_FULL_RESET = 95; 

const int LIBFPTR_ERROR_DENIED_BY_LICENSE = 96; 

const int LIBFPTR_ERROR_DISCOUNT_CANCELLATION_DENIED = 97; 

const int LIBFPTR_ERROR_CLOSE_RECEIPT_DENIED = 98; 

const int LIBFPTR_ERROR_INVALID_ROUTE_NUMBER = 99; 

const int LIBFPTR_ERROR_INVALID_START_ZONE_NUMBER = 100; 

const int LIBFPTR_ERROR_INVALID_END_ZONE_NUMBER = 101; 

const int LIBFPTR_ERROR_INVALID_RATE_TYPE = 102; 

const int LIBFPTR_ERROR_INVALID_RATE = 103; 

const int LIBFPTR_ERROR_FISCAL_MODULE_EXCHANGE = 104; 

const int LIBFPTR_ERROR_NEED_TECHNICAL_SUPPORT = 105; 

const int LIBFPTR_ERROR_SHIFT_NUMBERS_DID_NOT_MATCH = 106; 

const int LIBFPTR_ERROR_DEVICE_NOT_FOUND = 107; 

const int LIBFPTR_ERROR_EXTERNAL_DEVICE_CONNECTION = 108; 

const int LIBFPTR_ERROR_DISPENSER_INVALID_STATE = 109; 

const int LIBFPTR_ERROR_INVALID_POSITIONS_COUNT = 110; 

const int LIBFPTR_ERROR_DISPENSER_INVALID_NUMBER = 111; 

const int LIBFPTR_ERROR_INVALID_DIVIDER = 112; 

const int LIBFPTR_ERROR_FN_ACTIVATION_DENIED = 113; 

const int LIBFPTR_ERROR_PRINTER_OVERHEAT = 114; 

const int LIBFPTR_ERROR_FN_EXCHANGE = 115; 

const int LIBFPTR_ERROR_FN_INVALID_FORMAT = 116; 

const int LIBFPTR_ERROR_FN_INVALID_STATE = 117; 

const int LIBFPTR_ERROR_FN_FAULT = 118; 

const int LIBFPTR_ERROR_FN_CRYPTO_FAULT = 119; 

const int LIBFPTR_ERROR_FN_EXPIRED = 120; 

const int LIBFPTR_ERROR_FN_OVERFLOW = 121; 

const int LIBFPTR_ERROR_FN_INVALID_DATE_TIME = 122; 

const int LIBFPTR_ERROR_FN_NO_MORE_DATA = 123; 

const int LIBFPTR_ERROR_FN_TOTAL_OVERFLOW = 124; 

const int LIBFPTR_ERROR_BUFFER_OVERFLOW = 125; 

const int LIBFPTR_ERROR_PRINT_SECOND_COPY_DENIED = 126; 

const int LIBFPTR_ERROR_NEED_RESET_JOURNAL = 127; 

const int LIBFPTR_ERROR_TAX_SUM_TOO_MUCH = 128; 

const int LIBFPTR_ERROR_TAX_ON_LAST_OPERATION_DENIED = 129; 

const int LIBFPTR_ERROR_INVALID_FN_NUMBER = 130; 

const int LIBFPTR_ERROR_TAX_CANCEL_DENIED = 131; 

const int LIBFPTR_ERROR_LOW_BATTERY = 132; 

const int LIBFPTR_ERROR_FN_INVALID_COMMAND = 133; 

const int LIBFPTR_ERROR_FN_COMMAND_OVERFLOW = 134; 

const int LIBFPTR_ERROR_FN_NO_TRANSPORT_CONNECTION = 135; 

const int LIBFPTR_ERROR_FN_CRYPTO_HAS_EXPIRED = 136; 

const int LIBFPTR_ERROR_FN_RESOURCE_HAS_EXPIRED = 137; 

const int LIBFPTR_ERROR_INVALID_MESSAGE_FROM_OFD = 138; 

const int LIBFPTR_ERROR_FN_HAS_NOT_SEND_DOCUMENTS = 139; 

const int LIBFPTR_ERROR_FN_TIMEOUT = 140; 

const int LIBFPTR_ERROR_FN_SHIFT_EXPIRED = 141; 

const int LIBFPTR_ERROR_FN_INVALID_TIME_DIFFERENCE = 142; 

const int LIBFPTR_ERROR_INVALID_TAXATION_TYPE = 143; 

const int LIBFPTR_ERROR_INVALID_TAX_TYPE = 144; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_PAYMENT_TYPE = 145; 

const int LIBFPTR_ERROR_INVALID_COMMODITY_CODE_TYPE = 146; 

const int LIBFPTR_ERROR_EXCISABLE_COMMODITY_DENIED = 147; 

const int LIBFPTR_ERROR_FISCAL_PROPERTY_WRITE = 148; 

const int LIBFPTR_ERROR_INVALID_COUNTER_TYPE = 149; 

const int LIBFPTR_ERROR_CUTTER_FAULT = 150; 

const int LIBFPTR_ERROR_REPORT_INTERRUPTED = 151; 

const int LIBFPTR_ERROR_INVALID_LEFT_MARGIN = 152; 

const int LIBFPTR_ERROR_INVALID_ALIGNMENT = 153; 

const int LIBFPTR_ERROR_INVALID_TAX_MODE = 154; 

const int LIBFPTR_ERROR_FILE_NOT_FOUND = 155; 

const int LIBFPTR_ERROR_PICTURE_TOO_BIG = 156; 

const int LIBFPTR_ERROR_INVALID_BARCODE_PARAMS = 157; 

const int LIBFPTR_ERROR_FISCAL_PROPERTY_DENIED = 158; 

const int LIBFPTR_ERROR_FN_INTERFACE = 159; 

const int LIBFPTR_ERROR_DATA_DUPLICATE = 160; 

const int LIBFPTR_ERROR_NO_REQUIRED_FISCAL_PROPERTY = 161; 

const int LIBFPTR_ERROR_FN_READ_DOCUMENT = 162; 

const int LIBFPTR_ERROR_FLOAT_OVERFLOW = 163; 

const int LIBFPTR_ERROR_INVALID_SETTING_VALUE = 164; 

const int LIBFPTR_ERROR_HARD_FAULT = 165; 

const int LIBFPTR_ERROR_FN_NOT_FOUND = 166; 

const int LIBFPTR_ERROR_INVALID_AGENT_FISCAL_PROPERTY = 167; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1002_1056 = 168; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1002_1017 = 169; 

const int LIBFPTR_ERROR_SCRIPT = 170; 

const int LIBFPTR_ERROR_INVALID_USER_MEMORY_INDEX = 171; 

const int LIBFPTR_ERROR_NO_ACTIVE_OPERATOR = 172; 

const int LIBFPTR_ERROR_REGISTRATION_REPORT_INTERRUPTED = 173; 

const int LIBFPTR_ERROR_CLOSE_FN_REPORT_INTERRUPTED = 174; 

const int LIBFPTR_ERROR_OPEN_SHIFT_REPORT_INTERRUPTED = 175; 

const int LIBFPTR_ERROR_OFD_EXCHANGE_REPORT_INTERRUPTED = 176; 

const int LIBFPTR_ERROR_CLOSE_RECEIPT_INTERRUPTED = 177; 

const int LIBFPTR_ERROR_FN_QUERY_INTERRUPTED = 178; 

const int LIBFPTR_ERROR_RTC_FAULT = 179; 

const int LIBFPTR_ERROR_MEMORY_FAULT = 180; 

const int LIBFPTR_ERROR_CHIP_FAULT = 181; 

const int LIBFPTR_ERROR_TEMPLATES_CORRUPTED = 182; 

const int LIBFPTR_ERROR_INVALID_MAC_ADDRESS = 183; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_NUMBER = 184; 

const int LIBFPTR_ERROR_SCRIPTS_FAULT = 185; 

const int LIBFPTR_ERROR_INVALID_SCRIPTS_VERSION = 186; 

const int LIBFPTR_ERROR_INVALID_CLICHE_FORMAT = 187; 

const int LIBFPTR_ERROR_WAIT_FOR_REBOOT = 188; 

const int LIBFPTR_ERROR_NO_LICENSE = 189; 

const int LIBFPTR_ERROR_INVALID_FFD_VERSION = 190; 

const int LIBFPTR_ERROR_CHANGE_SETTING_DENIED = 191; 

const int LIBFPTR_ERROR_INVALID_NOMENCLATURE_TYPE = 192; 

const int LIBFPTR_ERROR_INVALID_GTIN = 193; 

const int LIBFPTR_ERROR_NEGATIVE_MATH_RESULT = 194; 

const int LIBFPTR_ERROR_FISCAL_PROPERTIES_COMBINATION = 195; 

const int LIBFPTR_ERROR_OPERATOR_LOGIN = 196; 

const int LIBFPTR_ERROR_INVALID_INTERNET_CHANNEL = 197; 

const int LIBFPTR_ERROR_DATETIME_NOT_SYNCRONIZED = 198; 

const int LIBFPTR_ERROR_JOURNAL = 199; 

const int LIBFPTR_ERROR_DENIED_IN_OPENED_DOC = 200; 

const int LIBFPTR_ERROR_DENIED_IN_CLOSED_DOC = 201; 

const int LIBFPTR_ERROR_LICENSE_MEMORY_OVERFLOW = 202; 

const int LIBFPTR_ERROR_NEED_CANCEL_DOCUMENT = 203; 

const int LIBFPTR_ERROR_REGISTERS_NOT_INITIALIZED = 204; 

const int LIBFPTR_ERROR_TOTAL_REQUIRED = 205; 

const int LIBFPTR_ERROR_SETTINGS_FAULT = 206; 

const int LIBFPTR_ERROR_COUNTERS_FAULT = 207; 

const int LIBFPTR_ERROR_USER_MEMORY_FAULT = 208; 

const int LIBFPTR_ERROR_SERVICE_COUNTERS_FAULT = 209; 

const int LIBFPTR_ERROR_ATTRIBUTES_FAULT = 210; 

const int LIBFPTR_ERROR_ALREADY_IN_UPDATE_MODE = 211; 

const int LIBFPTR_ERROR_INVALID_FIRMWARE = 212; 

const int LIBFPTR_ERROR_INVALID_CHANNEL = 213; 

const int LIBFPTR_ERROR_INTERFACE_DOWN = 214; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1212_1030 = 215; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1214 = 216; 

const int LIBFPTR_ERROR_INVALID_FISCAL_PROPERTY_VALUE_1212 = 217; 

const int LIBFPTR_ERROR_SYNC_TIME = 218; 

const int LIBFPTR_ERROR_VAT18_VAT20_IN_RECEIPT = 219; 

const int LIBFPTR_ERROR_PICTURE_NOT_CLOSED = 220; 

const int LIBFPTR_ERROR_INTERFACE_BUSY = 221; 

const int LIBFPTR_ERROR_INVALID_PICTURE_NUMBER = 222; 

const int LIBFPTR_ERROR_INVALID_CONTAINER = 223; 

const int LIBFPTR_ERROR_ARCHIVE_CLOSED = 224; 

const int LIBFPTR_ERROR_NEED_REGISTRATION = 225; 

const int LIBFPTR_ERROR_DENIED_DURING_UPDATE = 226; 

const int LIBFPTR_ERROR_INVALID_TOTAL = 227; 

const int LIBFPTR_ERROR_MARKING_CODE_CONFLICT = 228; 

const int LIBFPTR_ERROR_INVALID_RECORDS_ID = 229; 

const int LIBFPTR_ERROR_INVALID_SIGNATURE = 230; 

const int LIBFPTR_ERROR_INVALID_EXCISE_SUM = 231; 

const int LIBFPTR_ERROR_NO_DOCUMENTS_FOUND_IN_JOURNAL = 232; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_TYPE = 233; 

const int LIBFPTR_ERROR_INVALID_SCRIPT_NAME = 234; 

const int LIBFPTR_ERROR_INVALID_POSITIONS_COUNT_WITH_1162 = 235; 

const int LIBFPTR_ERROR_INVALID_UC_COUNTER = 236; 

const int LIBFPTR_ERROR_INVALID_UC_TAG = 237; 

const int LIBFPTR_ERROR_INVALID_UC_IDX = 238; 

const int LIBFPTR_ERROR_INVALID_UC_SIZE = 239; 

const int LIBFPTR_ERROR_INVALID_UC_CONFIG = 240; 

const int LIBFPTR_ERROR_CONNECTION_LOST = 241; 

const int LIBFPTR_ERROR_UNIVERSAL_COUNTERS_FAULT = 242; 

const int LIBFPTR_ERROR_INVALID_TAX_SUM = 243; 

const int LIBFPTR_ERROR_INVALID_MARKING_CODE_TYPE = 244; 

const int LIBFPTR_ERROR_LICENSE_HARD_FAULT = 245; 

const int LIBFPTR_ERROR_LICENSE_INVALID_SIGN = 246; 

const int LIBFPTR_ERROR_LICENSE_INVALID_SERIAL = 247; 

const int LIBFPTR_ERROR_LICENSE_INVALID_TIME = 248; 

const int LIBFPTR_ERROR_BASE_WEB = 500; 

const int LIBFPTR_ERROR_RECEIPT_PARSE_ERROR = 501; 

const int LIBFPTR_ERROR_INTERRUPTED_BY_PREVIOUS_ERRORS = 502; 

const int LIBFPTR_ERROR_DRIVER_SCRIPT_ERROR = 503; 

const int LIBFPTR_PORT_COM = 0; 

const int LIBFPTR_PORT_USB = 1; 

const int LIBFPTR_PORT_TCPIP = 2; 

const int LIBFPTR_PORT_BLUETOOTH = 3; 

const int LIBFPTR_PORT_BITS_7 = 7; 

const int LIBFPTR_PORT_BITS_8 = 8; 

const int LIBFPTR_PORT_PARITY_NO = 0; 

const int LIBFPTR_PORT_PARITY_ODD = 1; 

const int LIBFPTR_PORT_PARITY_EVEN = 2; 

const int LIBFPTR_PORT_PARITY_MARK = 3; 

const int LIBFPTR_PORT_PARITY_SPACE = 4; 

const int LIBFPTR_PORT_SB_1 = 0; 

const int LIBFPTR_PORT_SB_1_5 = 1; 

const int LIBFPTR_PORT_SB_2 = 2; 

const int LIBFPTR_BT_EAN_8 = 0; 

const int LIBFPTR_BT_EAN_13 = 1; 

const int LIBFPTR_BT_UPC_A = 2; 

const int LIBFPTR_BT_UPC_E = 3; 

const int LIBFPTR_BT_CODE_39 = 4; 

const int LIBFPTR_BT_CODE_93 = 5; 

const int LIBFPTR_BT_CODE_128 = 6; 

const int LIBFPTR_BT_CODABAR = 7; 

const int LIBFPTR_BT_ITF = 8; 

const int LIBFPTR_BT_ITF_14 = 9; 

const int LIBFPTR_BT_GS1_128 = 10; 

const int LIBFPTR_BT_QR = 11; 

const int LIBFPTR_BT_PDF417 = 12; 

const int LIBFPTR_BT_AZTEC = 13; 

const int LIBFPTR_BT_CODE_39_EXTENDED = 14; 

const int LIBFPTR_BC_DEFAULT = 0; 

const int LIBFPTR_BC_0 = 1; 

const int LIBFPTR_BC_1 = 2; 

const int LIBFPTR_BC_2 = 3; 

const int LIBFPTR_BC_3 = 4; 

const int LIBFPTR_BC_4 = 5; 

const int LIBFPTR_BC_5 = 6; 

const int LIBFPTR_BC_6 = 7; 

const int LIBFPTR_BC_7 = 8; 

const int LIBFPTR_BC_8 = 9; 

const int LIBFPTR_TM_POSITION = 0; 

const int LIBFPTR_TM_UNIT = 1; 

const int LIBFPTR_SCT_OVERALL = 0; 

const int LIBFPTR_SCT_FORWARD = 1; 

const int LIBFPTR_CT_ROLLUP = 0; 

const int LIBFPTR_CT_RESETTABLE = 1; 

const int LIBFPTR_SS_CLOSED = 0; 

const int LIBFPTR_SS_OPENED = 1; 

const int LIBFPTR_SS_EXPIRED = 2; 

const int LIBFPTR_CT_FULL = 0; 

const int LIBFPTR_CT_PART = 1; 

const int LIBFPTR_ALIGNMENT_LEFT = 0; 

const int LIBFPTR_ALIGNMENT_CENTER = 1; 

const int LIBFPTR_ALIGNMENT_RIGHT = 2; 

const int LIBFPTR_TW_NONE = 0; 

const int LIBFPTR_TW_WORDS = 1; 

const int LIBFPTR_TW_CHARS = 2; 

const int LIBFPTR_FNT_DEBUG = 0; 

const int LIBFPTR_FNT_RELEASE = 1; 

const int LIBFPTR_FNT_UNKNOWN = 2; 

const int LIBFPTR_RT_CLOSE_SHIFT = 0; 

const int LIBFPTR_RT_X = 1; 

const int LIBFPTR_RT_LAST_DOCUMENT = 2; 

const int LIBFPTR_RT_OFD_EXCHANGE_STATUS = 3; 

const int LIBFPTR_RT_KKT_DEMO = 4; 

const int LIBFPTR_RT_KKT_INFO = 5; 

const int LIBFPTR_RT_OFD_TEST = 6; 

const int LIBFPTR_RT_FN_DOC_BY_NUMBER = 7; 

const int LIBFPTR_RT_QUANTITY = 8; 

const int LIBFPTR_RT_DEPARTMENTS = 9; 

const int LIBFPTR_RT_OPERATORS = 10; 

const int LIBFPTR_RT_HOURS = 11; 

const int LIBFPTR_RT_FN_REGISTRATIONS = 12; 

const int LIBFPTR_RT_FN_SHIFT_TOTAL_COUNTERS = 13; 

const int LIBFPTR_RT_FN_TOTAL_COUNTERS = 14; 

const int LIBFPTR_RT_FN_NOT_SENT_DOCUMENTS_COUNTERS = 15; 

const int LIBFPTR_RT_COMMODITIES_BY_TAXATION_TYPES = 16; 

const int LIBFPTR_RT_COMMODITIES_BY_DEPARTMENTS = 17; 

const int LIBFPTR_RT_COMMODITIES_BY_SUMS = 18; 

const int LIBFPTR_RT_START_SERVICE = 19; 

const int LIBFPTR_RT_DISCOUNTS = 20; 

const int LIBFPTR_RT_JOURNAL_DOCUMENT_BY_NUMBERS = 21; 

const int LIBFPTR_RT_JOURNAL_DOCUMENT_BY_SHIFTS = 22; 

const int LIBFPTR_PT_CASH = 0; 

const int LIBFPTR_PT_ELECTRONICALLY = 1; 

const int LIBFPTR_PT_PREPAID = 2; 

const int LIBFPTR_PT_CREDIT = 3; 

const int LIBFPTR_PT_OTHER = 4; 

const int LIBFPTR_PT_6 = 5; 

const int LIBFPTR_PT_7 = 6; 

const int LIBFPTR_PT_8 = 7; 

const int LIBFPTR_PT_9 = 8; 

const int LIBFPTR_PT_10 = 9; 

const int LIBFPTR_TAX_DEPARTMENT = 0; 

const int LIBFPTR_TAX_VAT18 = 1; 

const int LIBFPTR_TAX_VAT10 = 2; 

const int LIBFPTR_TAX_VAT118 = 3; 

const int LIBFPTR_TAX_VAT110 = 4; 

const int LIBFPTR_TAX_VAT0 = 5; 

const int LIBFPTR_TAX_NO = 6; 

const int LIBFPTR_TAX_VAT20 = 7; 

const int LIBFPTR_TAX_VAT120 = 8; 

const int LIBFPTR_EXTERNAL_DEVICE_DISPLAY = 0; 

const int LIBFPTR_EXTERNAL_DEVICE_PINPAD = 1; 

const int LIBFPTR_EXTERNAL_DEVICE_MODEM = 2; 

const int LIBFPTR_EXTERNAL_DEVICE_BARCODE_SCANNER = 3; 

const int LIBFPTR_DT_STATUS = 0; 

const int LIBFPTR_DT_CASH_SUM = 1; 

const int LIBFPTR_DT_UNIT_VERSION = 2; 

const int LIBFPTR_DT_PICTURE_INFO = 3; 

const int LIBFPTR_DT_LICENSE_ACTIVATED = 4; 

const int LIBFPTR_DT_REGISTRATIONS_SUM = 5; 

const int LIBFPTR_DT_REGISTRATIONS_COUNT = 6; 

const int LIBFPTR_DT_PAYMENT_SUM = 7; 

const int LIBFPTR_DT_CASHIN_SUM = 8; 

const int LIBFPTR_DT_CASHIN_COUNT = 9; 

const int LIBFPTR_DT_CASHOUT_SUM = 10; 

const int LIBFPTR_DT_CASHOUT_COUNT = 11; 

const int LIBFPTR_DT_REVENUE = 12; 

const int LIBFPTR_DT_DATE_TIME = 13; 

const int LIBFPTR_DT_SHIFT_STATE = 14; 

const int LIBFPTR_DT_RECEIPT_STATE = 15; 

const int LIBFPTR_DT_SERIAL_NUMBER = 16; 

const int LIBFPTR_DT_MODEL_INFO = 17; 

const int LIBFPTR_DT_RECEIPT_LINE_LENGTH = 18; 

const int LIBFPTR_DT_CUTTER_RESOURCE = 19; 

const int LIBFPTR_DT_STEP_RESOURCE = 20; 

const int LIBFPTR_DT_TERMAL_RESOURCE = 21; 

const int LIBFPTR_DT_ENVD_MODE = 22; 

const int LIBFPTR_DT_SHIFT_TAX_SUM = 23; 

const int LIBFPTR_DT_RECEIPT_TAX_SUM = 24; 

const int LIBFPTR_DT_NON_NULLABLE_SUM = 25; 

const int LIBFPTR_DT_RECEIPT_COUNT = 26; 

const int LIBFPTR_DT_CANCELLATION_COUNT_ALL = 27; 

const int LIBFPTR_DT_CANCELLATION_SUM = 28; 

const int LIBFPTR_DT_CANCELLATION_SUM_ALL = 29; 

const int LIBFPTR_DT_POWER_SOURCE_STATE = 30; 

const int LIBFPTR_DT_CANCELLATION_COUNT = 31; 

const int LIBFPTR_DT_NON_NULLABLE_SUM_BY_PAYMENTS = 32; 

const int LIBFPTR_DT_PRINTER_TEMPERATURE = 33; 

const int LIBFPTR_DT_FATAL_STATUS = 34; 

const int LIBFPTR_DT_MAC_ADDRESS = 35; 

const int LIBFPTR_DT_DEVICE_UPTIME = 36; 

const int LIBFPTR_DT_RECEIPT_BYTE_COUNT = 37; 

const int LIBFPTR_DT_DISCOUNT_AND_SURCHARGE_SUM = 38; 

const int LIBFPTR_DT_LK_USER_CODE = 39; 

const int LIBFPTR_DT_LAST_SENT_OFD_DOCUMENT_DATE_TIME = 40; 

const int LIBFPTR_DT_SHORT_STATUS = 41; 

const int LIBFPTR_DT_PICTURES_ARRAY_INFO = 42; 

const int LIBFPTR_DT_ETHERNET_INFO = 43; 

const int LIBFPTR_DT_SCRIPTS_INFO = 44; 

const int LIBFPTR_DT_SHIFT_TOTALS = 45; 

const int LIBFPTR_DT_WIFI_INFO = 46; 

const int LIBFPTR_FNDT_TAG_VALUE = 0; 

const int LIBFPTR_FNDT_OFD_EXCHANGE_STATUS = 1; 

const int LIBFPTR_FNDT_FN_INFO = 2; 

const int LIBFPTR_FNDT_LAST_REGISTRATION = 3; 

const int LIBFPTR_FNDT_LAST_RECEIPT = 4; 

const int LIBFPTR_FNDT_LAST_DOCUMENT = 5; 

const int LIBFPTR_FNDT_SHIFT = 6; 

const int LIBFPTR_FNDT_FFD_VERSIONS = 7; 

const int LIBFPTR_FNDT_VALIDITY = 8; 

const int LIBFPTR_FNDT_REG_INFO = 9; 

const int LIBFPTR_FNDT_DOCUMENTS_COUNT_IN_SHIFT = 10; 

const int LIBFPTR_FNDT_ERRORS = 11; 

const int LIBFPTR_FNDT_TICKET_BY_DOC_NUMBER = 12; 

const int LIBFPTR_FNDT_DOCUMENT_BY_NUMBER = 13; 

const int LIBFPTR_FNDT_REGISTRATION_TLV = 14; 

const int LIBFPTR_FNDT_ERROR_DETAIL = 15; 

const int LIBFPTR_FNDT_VALIDITY_DAYS = 16; 

const int LIBFPTR_FNDT_FREE_MEMORY = 17; 

const int LIBFPTR_FNDT_TOTALS = 18; 

const int LIBFPTR_UT_FIRMWARE = 0; 

const int LIBFPTR_UT_CONFIGURATION = 1; 

const int LIBFPTR_UT_TEMPLATES = 2; 

const int LIBFPTR_UT_CONTROL_UNIT = 3; 

const int LIBFPTR_UT_BOOT = 4; 

const int LIBFPTR_FNOP_REGISTRATION = 0; 

const int LIBFPTR_FNOP_CHANGE_FN = 1; 

const int LIBFPTR_FNOP_CHANGE_PARAMETERS = 2; 

const int LIBFPTR_FNOP_CLOSE_ARCHIVE = 3; 

const int LIBFPTR_OFD_CHANNEL_NONE = 0; 

const int LIBFPTR_OFD_CHANNEL_USB = 1; 

const int LIBFPTR_OFD_CHANNEL_PROTO = 2; 

const int LIBFPTR_PST_POWER_SUPPLY = 0; 

const int LIBFPTR_PST_RTC_BATTERY = 1; 

const int LIBFPTR_PST_BATTERY = 2; 

const int LIBFPTR_RT_LAST_DOCUMENT_LINES = 0; 

const int LIBFPTR_RT_FN_DOCUMENT_TLVS = 1; 

const int LIBFPTR_RT_EXEC_USER_SCRIPT = 2; 

const int LIBFPTR_RT_FIRMWARE = 3; 

const int LIBFPTR_RT_LICENSES = 4; 

const int LIBFPTR_RT_FN_REGISTRATION_TLVS = 5; 

const int LIBFPTR_RT_PARSE_COMPLEX_ATTR = 6; 

const int LIBFPTR_RT_FN_SUM_COUNTERS = 7; 

const int LIBFPTR_RT_FN_QUANTITY_COUNTERS = 8; 

const int LIBFPTR_RT_FN_UNSENT_DOCS_COUNTERS = 9; 

const int LIBFPTR_RT_SETTINGS = 10; 

const int LIBFPTR_LOG_ERROR = 0; 

const int LIBFPTR_LOG_WARN = 1; 

const int LIBFPTR_LOG_INFO = 2; 

const int LIBFPTR_LOG_DEBUG = 3; 

const std::wstring LIBFPTR_SETTING_LIBRARY_PATH = L"LibraryPath"; 

const std::wstring LIBFPTR_SETTING_MODEL = L"Model"; 

const std::wstring LIBFPTR_SETTING_PORT = L"Port"; 

const std::wstring LIBFPTR_SETTING_BAUDRATE = L"BaudRate"; 

const std::wstring LIBFPTR_SETTING_BITS = L"Bits"; 

const std::wstring LIBFPTR_SETTING_PARITY = L"Parity"; 

const std::wstring LIBFPTR_SETTING_STOPBITS = L"StopBits"; 

const std::wstring LIBFPTR_SETTING_IPADDRESS = L"IPAddress"; 

const std::wstring LIBFPTR_SETTING_IPPORT = L"IPPort"; 

const std::wstring LIBFPTR_SETTING_MACADDRESS = L"MACAddress"; 

const std::wstring LIBFPTR_SETTING_COM_FILE = L"ComFile"; 

const std::wstring LIBFPTR_SETTING_USB_DEVICE_PATH = L"UsbDevicePath"; 

const std::wstring LIBFPTR_SETTING_BT_AUTOENABLE = L"AutoEnableBluetooth"; 

const std::wstring LIBFPTR_SETTING_BT_AUTODISABLE = L"AutoDisableBluetooth"; 

const std::wstring LIBFPTR_SETTING_ACCESS_PASSWORD = L"AccessPassword"; 

const std::wstring LIBFPTR_SETTING_USER_PASSWORD = L"UserPassword"; 

const std::wstring LIBFPTR_SETTING_OFD_CHANNEL = L"OfdChannel"; 

const std::wstring LIBFPTR_SETTING_EXISTED_COM_FILES = L"ExistedComFiles"; 

const std::wstring LIBFPTR_SETTING_SCRIPTS_PATH = L"ScriptsPath"; 

const std::wstring LIBFPTR_SETTING_DOCUMENTS_JOURNAL_PATH = L"DocumentsJournalPath"; 

const std::wstring LIBFPTR_SETTING_USE_DOCUMENTS_JOURNAL = L"UseDocumentsJournal"; 

const std::wstring LIBFPTR_SETTING_AUTO_RECONNECT = L"AutoReconnect"; 

const std::wstring LIBFPTR_SETTING_INVERT_CASH_DRAWER_STATUS = L"InvertCashDrawerStatus"; 

const int LIBFPTR_MODEL_UNKNOWN = 0; 

const int LIBFPTR_MODEL_ATOL_25F = 57; 

const int LIBFPTR_MODEL_ATOL_30F = 61; 

const int LIBFPTR_MODEL_ATOL_55F = 62; 

const int LIBFPTR_MODEL_ATOL_22F = 63; 

const int LIBFPTR_MODEL_ATOL_52F = 64; 

const int LIBFPTR_MODEL_ATOL_11F = 67; 

const int LIBFPTR_MODEL_ATOL_77F = 69; 

const int LIBFPTR_MODEL_ATOL_90F = 72; 

const int LIBFPTR_MODEL_ATOL_60F = 75; 

const int LIBFPTR_MODEL_ATOL_42FS = 77; 

const int LIBFPTR_MODEL_ATOL_15F = 78; 

const int LIBFPTR_MODEL_ATOL_50F = 80; 

const int LIBFPTR_MODEL_ATOL_20F = 81; 

const int LIBFPTR_MODEL_ATOL_91F = 82; 

const int LIBFPTR_MODEL_ATOL_92F = 84; 

const int LIBFPTR_MODEL_ATOL_SIGMA_10 = 86; 

const int LIBFPTR_MODEL_ATOL_27F = 87; 

const int LIBFPTR_MODEL_ATOL_SIGMA_7F = 90; 

const int LIBFPTR_MODEL_ATOL_SIGMA_8F = 91; 

const int LIBFPTR_MODEL_ATOL_1F = 93; 

const int LIBFPTR_MODEL_KAZNACHEY_FA = 76; 

const int LIBFPTR_MODEL_ATOL_AUTO = 500; 

const int LIBFPTR_PORT_BR_1200 = 1200; 

const int LIBFPTR_PORT_BR_2400 = 2400; 

const int LIBFPTR_PORT_BR_4800 = 4800; 

const int LIBFPTR_PORT_BR_9600 = 9600; 

const int LIBFPTR_PORT_BR_19200 = 19200; 

const int LIBFPTR_PORT_BR_38400 = 38400; 

const int LIBFPTR_PORT_BR_57600 = 57600; 

const int LIBFPTR_PORT_BR_115200 = 115200; 

const int LIBFPTR_PORT_BR_230400 = 230400; 

const int LIBFPTR_PORT_BR_460800 = 460800; 

const int LIBFPTR_PORT_BR_921600 = 921600; 

const int LIBFPTR_FNS_INITIAL = 0; 

const int LIBFPTR_FNS_CONFIGURED = 1; 

const int LIBFPTR_FNS_FISCAL_MODE = 3; 

const int LIBFPTR_FNS_POSTFISCAL_MODE = 7; 

const int LIBFPTR_FNS_ACCESS_ARCHIVE = 15; 

const int LIBFPTR_RT_CLOSED = 0; 

const int LIBFPTR_RT_SELL = 1; 

const int LIBFPTR_RT_SELL_RETURN = 2; 

const int LIBFPTR_RT_SELL_CORRECTION = 7; 

const int LIBFPTR_RT_SELL_RETURN_CORRECTION = 8; 

const int LIBFPTR_RT_BUY = 4; 

const int LIBFPTR_RT_BUY_RETURN = 5; 

const int LIBFPTR_RT_BUY_CORRECTION = 9; 

const int LIBFPTR_RT_BUY_RETURN_CORRECTION = 10; 

const int LIBFPTR_FFD_UNKNOWN = 0; 

const int LIBFPTR_FFD_1_0 = 100; 

const int LIBFPTR_FFD_1_0_5 = 105; 

const int LIBFPTR_FFD_1_1 = 110; 

const int LIBFPTR_TT_DEFAULT = 0; 

const int LIBFPTR_TT_OSN = 1; 

const int LIBFPTR_TT_USN_INCOME = 2; 

const int LIBFPTR_TT_USN_INCOME_OUTCOME = 4; 

const int LIBFPTR_TT_ENVD = 8; 

const int LIBFPTR_TT_ESN = 16; 

const int LIBFPTR_TT_PATENT = 32; 

const int LIBFPTR_AT_NONE = 0; 

const int LIBFPTR_AT_BANK_PAYING_AGENT = 1; 

const int LIBFPTR_AT_BANK_PAYING_SUBAGENT = 2; 

const int LIBFPTR_AT_PAYING_AGENT = 4; 

const int LIBFPTR_AT_PAYING_SUBAGENT = 8; 

const int LIBFPTR_AT_ATTORNEY = 16; 

const int LIBFPTR_AT_COMMISSION_AGENT = 32; 

const int LIBFPTR_AT_ANOTHER = 64; 

const int LIBFPTR_NT_FURS = 0; 

const int LIBFPTR_NT_MEDICINES = 1; 

const int LIBFPTR_NT_TOBACCO = 2; 

const int LIBFPTR_NT_SHOES = 3; 

const int LIBFPTR_FN_DOC_REGISTRATION = 1; 

const int LIBFPTR_FN_DOC_OPEN_SHIFT = 2; 

const int LIBFPTR_FN_DOC_RECEIPT = 3; 

const int LIBFPTR_FN_DOC_BSO = 4; 

const int LIBFPTR_FN_DOC_CLOSE_SHIFT = 5; 

const int LIBFPTR_FN_DOC_CLOSE_FN = 6; 

const int LIBFPTR_FN_DOC_OPERATOR_CONFIRMATION = 7; 

const int LIBFPTR_FN_DOC_REREGISTRATION = 11; 

const int LIBFPTR_FN_DOC_EXCHANGE_STATUS = 21; 

const int LIBFPTR_FN_DOC_CORRECTION = 31; 

const int LIBFPTR_FN_DOC_BSO_CORRECTION = 41; 

const int LIBFPTR_UMO_GET_SIZE = 0; 

const int LIBFPTR_UMO_READ_DATA = 1; 

const int LIBFPTR_UMO_WRITE_DATA = 2; 

const int LIBFPTR_UMO_READ_STRING = 3; 

const int LIBFPTR_UMO_WRITE_STRING = 4; 

const int LIBFPTR_UMO_COMMIT = 5; 

const int LIBFPTR_GUI_PARENT_NATIVE = 0; 

const int LIBFPTR_GUI_PARENT_QT = 1; 

const int LIBFPTR_DEFER_NONE = 0; 

const int LIBFPTR_DEFER_PRE = 1; 

const int LIBFPTR_DEFER_POST = 2; 

const int LIBFPTR_DEFER_OVERLAY = 3; 

const int LIBFPTR_TAG_TYPE_STLV = 0; 

const int LIBFPTR_TAG_TYPE_STRING = 1; 

const int LIBFPTR_TAG_TYPE_ARRAY = 2; 

const int LIBFPTR_TAG_TYPE_FVLN = 3; 

const int LIBFPTR_TAG_TYPE_BITS = 4; 

const int LIBFPTR_TAG_TYPE_BYTE = 5; 

const int LIBFPTR_TAG_TYPE_VLN = 6; 

const int LIBFPTR_TAG_TYPE_UINT_16 = 7; 

const int LIBFPTR_TAG_TYPE_UINT_32 = 8; 

const int LIBFPTR_TAG_TYPE_UNIX_TIME = 9; 

const int LIBFPTR_TAG_TYPE_BOOL = 10; 

const int LIBFPTR_FT_BYTE_ARRAY = 0; 

const int LIBFPTR_FT_BIN = 1; 

const int LIBFPTR_FT_BCD = 2; 

const int LIBFPTR_FT_STRING = 3; 

const int LIBFPTR_FT_STRING_NULL_TERM = 4; 

const int LIBFPTR_ST_NUMBER = 0; 

const int LIBFPTR_ST_STRING = 1; 

const int LIBFPTR_ST_BOOL = 2; 

const int LIBFPTR_FWT_FIRMWARE = 0; 

const int LIBFPTR_FWT_SCRIPTS = 2; 

const int LIBFPTR_SCRIPT_EXECUTABLE = 0; 

const int LIBFPTR_SCRIPT_JSON = 1; 

const int LIBFPTR_UCL_UNUSED = 0; 

const int LIBFPTR_UCL_RECEIPT_TYPE = 1; 

const int LIBFPTR_UCL_TAXATION_TYPE = 2; 

const int LIBFPTR_UCL_TAX_TYPE = 3; 

const int LIBFPTR_UCL_PRODUCT_TYPE = 4; 

const int LIBFPTR_UCL_PAYMENT_METHOD = 5; 

const int LIBFPTR_UCL_USER_3 = 6; 

const int LIBFPTR_UCL_USER_4 = 7; 

const int LIBFPTR_UCL_USER_5 = 8; 

const int LIBFPTR_UCL_USER_6 = 9; 

const int LIBFPTR_UCF_CALC_SUMS = 1; 

const int LIBFPTR_UCF_CALC_QUANTITIES = 2; 

const int LIBFPTR_UCF_CALC_SUMS_OTHERS = 4; 

const int LIBFPTR_UCF_CALC_QUANTITIES_OTHERS = 8; 

const unsigned int LIBFPTR_UC_OTHERS = 4294967295; 

const int LIBFPTR_FNCT_SHIFT = 0; 

const int LIBFPTR_FNCT_NON_NULLABLE = 1; 

const int LIBFPTR_MCT_OTHER = 0; 

const int LIBFPTR_MCT_EGAIS_20 = 1; 

const int LIBFPTR_MCT_EGAIS_30 = 2; 


class Fptr
{
public:
    explicit Fptr(const std::wstring &libraryPath = L"");
    virtual ~Fptr();

    virtual std::string version();
    virtual int logWrite(const std::wstring &tag, int level, const std::wstring &message);

    virtual bool isOpened();

    virtual int showProperties(int parantType, void *parent);

    virtual int errorCode();
    virtual std::wstring errorDescription();
    virtual void resetError();

    virtual int setSettings(const std::wstring &settings);
    virtual std::wstring getSettings();
    virtual void setSingleSetting(const std::wstring &key, const std::wstring &value);
    virtual std::wstring getSingleSetting(const std::wstring &key);

    virtual void setParam(int param, int value);
    virtual void setParam(int param, unsigned int value);
    virtual void setParam(int param, bool value);
    virtual void setParam(int param, double value);
    virtual void setParam(int param, const std::wstring &value);
    virtual void setParam(int param, const wchar_t *value);
    virtual void setParam(int param, unsigned char *value, int size);
    virtual void setParam(int param, const std::tm &value);

    virtual void setNonPrintableParam(int param, int value);
    virtual void setNonPrintableParam(int param, unsigned int value);
    virtual void setNonPrintableParam(int param, bool value);
    virtual void setNonPrintableParam(int param, double value);
    virtual void setNonPrintableParam(int param, const std::wstring &value);
    virtual void setNonPrintableParam(int param, const unsigned char *value, int size);
    virtual void setNonPrintableParam(int param, const std::tm &value);

    virtual void setUserParam(int param, int value);
    virtual void setUserParam(int param, unsigned int value);
    virtual void setUserParam(int param, bool value);
    virtual void setUserParam(int param, double value);
    virtual void setUserParam(int param, const std::wstring &value);
    virtual void setUserParam(int param, unsigned char *value, int size);
    virtual void setUserParam(int param, const std::tm &value);

    virtual unsigned int getParamInt(int param);
    virtual bool getParamBool(int param);
    virtual double getParamDouble(int param);
    virtual std::wstring getParamString(int param);
    virtual std::vector<unsigned char> getParamByteArray(int param);
    virtual int getParamByteArray(int param, unsigned char *value, int size);
    virtual std::tm getParamDateTime(int param);


    
    virtual int applySingleSettings();

    
    virtual int open();

    
    virtual int close();

    
    virtual int resetParams();

    
    virtual int runCommand();

    
    virtual int beep();

    
    virtual int openDrawer();

    
    virtual int cut();

    
    virtual int devicePoweroff();

    
    virtual int deviceReboot();

    
    virtual int openShift();

    
    virtual int resetSummary();

    
    virtual int initDevice();

    
    virtual int queryData();

    
    virtual int cashIncome();

    
    virtual int cashOutcome();

    
    virtual int openReceipt();

    
    virtual int cancelReceipt();

    
    virtual int closeReceipt();

    
    virtual int checkDocumentClosed();

    
    virtual int receiptTotal();

    
    virtual int receiptTax();

    
    virtual int registration();

    
    virtual int payment();

    
    virtual int report();

    
    virtual int printText();

    
    virtual int printCliche();

    
    virtual int beginNonfiscalDocument();

    
    virtual int endNonfiscalDocument();

    
    virtual int printBarcode();

    
    virtual int printPicture();

    
    virtual int printPictureByNumber();

    
    virtual int uploadPictureFromFile();

    
    virtual int clearPictures();

    
    virtual int writeDeviceSettingRaw();

    
    virtual int readDeviceSettingRaw();

    
    virtual int commitSettings();

    
    virtual int initSettings();

    
    virtual int resetSettings();

    
    virtual int writeDateTime();

    
    virtual int writeLicense();

    
    virtual int fnOperation();

    
    virtual int fnQueryData();

    
    virtual int fnWriteAttributes();

    
    virtual int externalDevicePowerOn();

    
    virtual int externalDevicePowerOff();

    
    virtual int externalDeviceWriteData();

    
    virtual int externalDeviceReadData();

    
    virtual int operatorLogin();

    
    virtual int processJson();

    
    virtual int readDeviceSetting();

    
    virtual int writeDeviceSetting();

    
    virtual int beginReadRecords();

    
    virtual int readNextRecord();

    
    virtual int endReadRecords();

    
    virtual int userMemoryOperation();

    
    virtual int continuePrint();

    
    virtual int initMgm();

    
    virtual int utilFormTlv();

    
    virtual int utilFormNomenclature();

    
    virtual int utilMapping();

    
    virtual int readModelFlags();

    
    virtual int lineFeed();

    
    virtual int flashFirmware();

    
    virtual int softLockInit();

    
    virtual int softLockQuerySessionCode();

    
    virtual int softLockValidate();

    
    virtual int utilCalcTax();

    
    virtual int downloadPicture();

    
    virtual int bluetoothRemovePairedDevices();

    
    virtual int utilTagInfo();

    
    virtual int utilContainerVersions();

    
    virtual int activateLicenses();

    
    virtual int removeLicenses();

    
    virtual int enterKeys();

    
    virtual int validateKeys();

    
    virtual int enterSerialNumber();

    
    virtual int getSerialNumberRequest();

    
    virtual int uploadPixelBuffer();

    
    virtual int downloadPixelBuffer();

    
    virtual int printPixelBuffer();

    
    virtual int utilConvertTagValue();

    
    virtual int parseMarkingCode();

    
    virtual int callScript();

    
    virtual int setHeaderLines();

    
    virtual int setFooterLines();

    
    virtual int uploadPictureCliche();

    
    virtual int uploadPictureMemory();

    
    virtual int uploadPixelBufferCliche();

    
    virtual int uploadPixelBufferMemory();

    
    virtual int execDriverScript();

    
    virtual int uploadDriverScript();

    
    virtual int execDriverScriptById();

    
    virtual int writeUniversalCountersSettings();

    
    virtual int readUniversalCountersSettings();

    
    virtual int queryUniversalCountersState();

    
    virtual int resetUniversalCounters();

    
    virtual int cacheUniversalCounters();

    
    virtual int readUniversalCounterSum();

    
    virtual int readUniversalCounterQuantity();

    
    virtual int clearUniversalCountersCache();

    
    virtual int disableOfdChannel();

    
    virtual int enableOfdChannel();


private:
    LIBRARY_HANDLE m_library;
    void *m_fptr;

    GET_VERSION_STRING_METHOD m_getVersionMethod;
    CREATE_METHOD m_createMethod;
    DESTROY_METHOD m_destroyMethod;

    SET_SETTINGS_METHOD m_setSettingsMethod;
    GET_SETTINGS_METHOD m_getSettingsMethod;
    SET_SINGLE_SETTING_METHOD m_setSingleSettingMethod;
    GET_SINGLE_SETTING_METHOD m_getSingleSettingMethod;

    IS_OPENED_METHOD m_isOpenedMethod;
    ERROR_CODE_METHOD m_errorCodeMethod;
    ERROR_DESCRIPTION_METHOD m_errorDescriptionMethod;
    RESET_ERROR_METHOD m_resetErrorMethod;

    SET_PARAM_BOOL_METHOD m_setParamBoolMethod;
    SET_PARAM_INT_METHOD m_setParamIntMethod;
    SET_PARAM_DOUBLE_METHOD m_setParamDoubleMethod;
    SET_PARAM_STRING_METHOD m_setParamStringMethod;
    SET_PARAM_BYTEARRAY_METHOD m_setParamByteArrayMethod;
    SET_PARAM_DATETIME_METHOD m_setParamDateTimeMethod;

    SET_PARAM_BOOL_METHOD m_setNonPrintableParamBoolMethod;
    SET_PARAM_INT_METHOD m_setNonPrintableParamIntMethod;
    SET_PARAM_DOUBLE_METHOD m_setNonPrintableParamDoubleMethod;
    SET_PARAM_STRING_METHOD m_setNonPrintableParamStringMethod;
    SET_PARAM_BYTEARRAY_METHOD m_setNonPrintableParamByteArrayMethod;
    SET_PARAM_DATETIME_METHOD m_setNonPrintableParamDateTimeMethod;

    SET_PARAM_BOOL_METHOD m_setUserParamBoolMethod;
    SET_PARAM_INT_METHOD m_setUserParamIntMethod;
    SET_PARAM_DOUBLE_METHOD m_setUserParamDoubleMethod;
    SET_PARAM_STRING_METHOD m_setUserParamStringMethod;
    SET_PARAM_BYTEARRAY_METHOD m_setUserParamByteArrayMethod;
    SET_PARAM_DATETIME_METHOD m_setUserParamDateTimeMethod;

    GET_PARAM_BOOL_METHOD m_getParamBoolMethod;
    GET_PARAM_INT_METHOD m_getParamIntMethod;
    GET_PARAM_DOUBLE_METHOD m_getParamDoubleMethod;
    GET_PARAM_STRING_METHOD m_getParamStringMethod;
    GET_PARAM_BYTEARRAY_METHOD m_getParamByteArrayMethod;
    GET_PARAM_DATETIME_METHOD m_getParamDateTimeMethod;

    WRITE_LOG_METHOD m_writeLogMethod;
    SHOW_PROPERTIES_METHOD m_showPropertiesMethod;

    void loadMethods();


    COMMON_METHOD m_applySingleSettingsMethod;

    COMMON_METHOD m_openMethod;

    COMMON_METHOD m_closeMethod;

    COMMON_METHOD m_resetParamsMethod;

    COMMON_METHOD m_runCommandMethod;

    COMMON_METHOD m_beepMethod;

    COMMON_METHOD m_openDrawerMethod;

    COMMON_METHOD m_cutMethod;

    COMMON_METHOD m_devicePoweroffMethod;

    COMMON_METHOD m_deviceRebootMethod;

    COMMON_METHOD m_openShiftMethod;

    COMMON_METHOD m_resetSummaryMethod;

    COMMON_METHOD m_initDeviceMethod;

    COMMON_METHOD m_queryDataMethod;

    COMMON_METHOD m_cashIncomeMethod;

    COMMON_METHOD m_cashOutcomeMethod;

    COMMON_METHOD m_openReceiptMethod;

    COMMON_METHOD m_cancelReceiptMethod;

    COMMON_METHOD m_closeReceiptMethod;

    COMMON_METHOD m_checkDocumentClosedMethod;

    COMMON_METHOD m_receiptTotalMethod;

    COMMON_METHOD m_receiptTaxMethod;

    COMMON_METHOD m_registrationMethod;

    COMMON_METHOD m_paymentMethod;

    COMMON_METHOD m_reportMethod;

    COMMON_METHOD m_printTextMethod;

    COMMON_METHOD m_printClicheMethod;

    COMMON_METHOD m_beginNonfiscalDocumentMethod;

    COMMON_METHOD m_endNonfiscalDocumentMethod;

    COMMON_METHOD m_printBarcodeMethod;

    COMMON_METHOD m_printPictureMethod;

    COMMON_METHOD m_printPictureByNumberMethod;

    COMMON_METHOD m_uploadPictureFromFileMethod;

    COMMON_METHOD m_clearPicturesMethod;

    COMMON_METHOD m_writeDeviceSettingRawMethod;

    COMMON_METHOD m_readDeviceSettingRawMethod;

    COMMON_METHOD m_commitSettingsMethod;

    COMMON_METHOD m_initSettingsMethod;

    COMMON_METHOD m_resetSettingsMethod;

    COMMON_METHOD m_writeDateTimeMethod;

    COMMON_METHOD m_writeLicenseMethod;

    COMMON_METHOD m_fnOperationMethod;

    COMMON_METHOD m_fnQueryDataMethod;

    COMMON_METHOD m_fnWriteAttributesMethod;

    COMMON_METHOD m_externalDevicePowerOnMethod;

    COMMON_METHOD m_externalDevicePowerOffMethod;

    COMMON_METHOD m_externalDeviceWriteDataMethod;

    COMMON_METHOD m_externalDeviceReadDataMethod;

    COMMON_METHOD m_operatorLoginMethod;

    COMMON_METHOD m_processJsonMethod;

    COMMON_METHOD m_readDeviceSettingMethod;

    COMMON_METHOD m_writeDeviceSettingMethod;

    COMMON_METHOD m_beginReadRecordsMethod;

    COMMON_METHOD m_readNextRecordMethod;

    COMMON_METHOD m_endReadRecordsMethod;

    COMMON_METHOD m_userMemoryOperationMethod;

    COMMON_METHOD m_continuePrintMethod;

    COMMON_METHOD m_initMgmMethod;

    COMMON_METHOD m_utilFormTlvMethod;

    COMMON_METHOD m_utilFormNomenclatureMethod;

    COMMON_METHOD m_utilMappingMethod;

    COMMON_METHOD m_readModelFlagsMethod;

    COMMON_METHOD m_lineFeedMethod;

    COMMON_METHOD m_flashFirmwareMethod;

    COMMON_METHOD m_softLockInitMethod;

    COMMON_METHOD m_softLockQuerySessionCodeMethod;

    COMMON_METHOD m_softLockValidateMethod;

    COMMON_METHOD m_utilCalcTaxMethod;

    COMMON_METHOD m_downloadPictureMethod;

    COMMON_METHOD m_bluetoothRemovePairedDevicesMethod;

    COMMON_METHOD m_utilTagInfoMethod;

    COMMON_METHOD m_utilContainerVersionsMethod;

    COMMON_METHOD m_activateLicensesMethod;

    COMMON_METHOD m_removeLicensesMethod;

    COMMON_METHOD m_enterKeysMethod;

    COMMON_METHOD m_validateKeysMethod;

    COMMON_METHOD m_enterSerialNumberMethod;

    COMMON_METHOD m_getSerialNumberRequestMethod;

    COMMON_METHOD m_uploadPixelBufferMethod;

    COMMON_METHOD m_downloadPixelBufferMethod;

    COMMON_METHOD m_printPixelBufferMethod;

    COMMON_METHOD m_utilConvertTagValueMethod;

    COMMON_METHOD m_parseMarkingCodeMethod;

    COMMON_METHOD m_callScriptMethod;

    COMMON_METHOD m_setHeaderLinesMethod;

    COMMON_METHOD m_setFooterLinesMethod;

    COMMON_METHOD m_uploadPictureClicheMethod;

    COMMON_METHOD m_uploadPictureMemoryMethod;

    COMMON_METHOD m_uploadPixelBufferClicheMethod;

    COMMON_METHOD m_uploadPixelBufferMemoryMethod;

    COMMON_METHOD m_execDriverScriptMethod;

    COMMON_METHOD m_uploadDriverScriptMethod;

    COMMON_METHOD m_execDriverScriptByIdMethod;

    COMMON_METHOD m_writeUniversalCountersSettingsMethod;

    COMMON_METHOD m_readUniversalCountersSettingsMethod;

    COMMON_METHOD m_queryUniversalCountersStateMethod;

    COMMON_METHOD m_resetUniversalCountersMethod;

    COMMON_METHOD m_cacheUniversalCountersMethod;

    COMMON_METHOD m_readUniversalCounterSumMethod;

    COMMON_METHOD m_readUniversalCounterQuantityMethod;

    COMMON_METHOD m_clearUniversalCountersCacheMethod;

    COMMON_METHOD m_disableOfdChannelMethod;

    COMMON_METHOD m_enableOfdChannelMethod;

};

}
}

#endif //DRIVERSX_CPP_WRAPPER_H
